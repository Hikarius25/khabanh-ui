import axios from "axios";

// T·∫°o Axios instance
const api = axios.create({
  baseURL: "http://localhost:10000",
  withCredentials: true, // Quan tr·ªçng n·∫øu backend y√™u c·∫ßu cookie
});

// Th√™m Interceptor ƒë·ªÉ x·ª≠ l√Ω l·ªói 401
api.interceptors.response.use(
  (response) => response, // N·∫øu response th√†nh c√¥ng, return nh∆∞ b√¨nh th∆∞·ªùng
  async (error) => {
    if (error.response && error.response.status === 401) {
      try {
        console.log("üîÑ AccessToken h·∫øt h·∫°n, ƒëang refresh...");
        // G·ª≠i request ƒë·ªÉ l·∫•y token m·ªõi
        const refreshResponse = await axios.post("http://localhost:10000/auth/refresh", {
          refreshToken: localStorage.getItem("refreshToken"), // L·∫•y refreshToken t·ª´ storage
        });

        // L∆∞u accessToken m·ªõi
        const newAccessToken = refreshResponse.data.token;
        localStorage.setItem("accessToken", newAccessToken);

        // G·ª≠i l·∫°i request c≈© v·ªõi token m·ªõi
        error.config.headers["Authorization"] = `Bearer ${newAccessToken}`;
        return api.request(error.config);
      } catch (refreshError) {
        console.error("üö´ Refresh token th·∫•t b·∫°i, c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i");
        // N·∫øu refresh th·∫•t b·∫°i, logout ng∆∞·ªùi d√πng
        localStorage.removeItem("accessToken");
        localStorage.removeItem("refreshToken");
        window.location.href = "/login"; // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang login
      }
    }

    return Promise.reject(error); // Tr·∫£ l·ªói v·ªÅ n·∫øu kh√¥ng ph·∫£i 401
  }
);

export default api;
